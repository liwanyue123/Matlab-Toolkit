addpath(genpath("TwistCalculation/twistAndScrew"));
addpath(genpath("TwistCalculation/drawPic"));
addpath(genpath("Coordinate"));
addpath(genpath("Matrix"));
addpath(genpath("Utils"));
addpath(genpath("simple"));
addpath(genpath("SphereTools"));
addpath(genpath("urdf"));
% 单纯的绘制矩阵T
function [lineList, T_cum] = drawLeg(T_list, T_base, C_world, labelPrefix, color)
    T_cum = T_base;
    lineList = [];
    lineList = [lineList, getCoordDotFromT(T_base)];  % 取出初始坐标
    for i = 1:length(T_list)
        T_cum = T_cum * T_list{i};
        Ci = genCoordinateCoord(C_world, T_cum);
        showCoordinate(Ci, sprintf('%s_{%d}', labelPrefix, i), 0.1);
        lineList = [lineList, Ci.p0(:)];
    end
    showLine(lineList, '-', color,3);
end

function [lineList, T_cum] = drawLegJoint(leg_struct, T_base, C_world, labelPrefix, color)
    T_cum = repmat(eye(4), 1, 1, length(leg_struct)+1);
    T_cum(:,:,1) = T_base;

    lineList = [];
    lineList = [lineList, getCoordDotFromT(T_base)];  % 初始坐标点
   
    n = length(leg_struct);
       % drawLegJoint函数中
    for i = 1:n
        T_joint = calTranMatrixFromR(leg_struct(i).type, leg_struct(i).theta);
        T_cum(:,:,i+1) = T_cum(:,:,i) * leg_struct(i).T * T_joint;  % 矩阵乘法顺序修改
        Ci = genCoordinateCoord(C_world, T_cum(:,:,i+1));
        showCoordinate(Ci, sprintf(leg_struct(i).name, labelPrefix, i), 0.1);
        lineList = [lineList, Ci.p0(:)];
        visualize_transformed_stl(['urdf/resource/',leg_struct(i).urdf],T_cum(:,:,i+1),0.8)
    end

    
    % 绘制连接线
    % showLine(lineList, '-', color, 2);
end
function [x, J_foot] = forwardKinematics(leg_struct)
    T_cum = eye(4);
    J_base = [];

    for i = 1:length(leg_struct)
        T_joint = calTranMatrixFromR(leg_struct(i).type, leg_struct(i).theta);
        T_cum = T_cum * leg_struct(i).T * T_joint;

        X = calAdjointMatFromT(T_cum, 'V');  % base -> i
        S_i = generateNormTwsit(leg_struct(i).type, 'Rotational');
        J_base = [J_base, X * S_i];
    end

    x = T_cum(1:3, 4);  % 足端位置

    % 足端坐标系下的 Jacobian
    Ad_inv = calAdjointMatFromT(inv(T_cum), 'V');
    J_foot = Ad_inv * J_base;

    % % world系
    % F_w=generateNormTwsit('Z', 'Prismatic')*10
    % % 转成末端坐标系   
    % X_foot_base=Ad_inv ;
    % F_f=X_foot_base*F_w
    % 
    % tau=transpose(J_foot)*F_f % 转的也是关节局部坐标系
end

% foot 三个分支变换矩阵（共用）
T_foot_front = [1 0 0 0.180; 0 1 0 0; 0 0 1 -0.060; 0 0 0 1];
T_foot_mid   = [1 0 0 0.000; 0 1 0 0; 0 0 1 -0.060; 0 0 0 1];
T_foot_hind  = [1 0 0 -0.090; 0 1 0 0; 0 0 1 -0.060; 0 0 0 1];
T_foot = {T_foot_front, T_foot_mid, T_foot_hind};

 
% 左腿
leg_left = struct(...
    'type', {'Y','X','Z','Y','Y','X'}, ...
    'theta', {0, 0, 0.3, 0.3, 0, 0}, ...
    'name', {'hip_{pitch}','hip_{roll}','hip_{yaw}','knee','ankle_{pitch}','ankle_{roll}'}, ...
    'urdf', {'left_hip_pitch_link.STL','left_hip_roll_link.STL','left_hip_yaw_link.STL','left_knee_link.STL','left_ankle_pitch_link.STL','left_ankle_roll_link.STL'}, ...
    'T', {...
        [ 1 0 0 0; 0 1 0 0.064452; 0 0 1 -0.102700; 0 0 0 1],...
        [ 0.984744 0 -0.174010 0; 0 1 0 0.052000; 0.174010 0 0.984744 -0.030465; 0 0 0 1],...
        [ 1 0 0 0.025001; 0 1 0 0; 0 0 1 -0.124120; 0 0 0 1],...
        [ 0.984744 0 0.174010 -0.078273; 0 1 0 0.002149; -0.174010 0 0.984744 -0.177340; 0 0 0 1],...
        [ 1 0 0 0; 0 1 0 -0.000094; 0 0 1 -0.300010; 0 0 0 1],...
        [ 1 0 0 0; 0 1 0 0; 0 0 1 -0.017558; 0 0 0 1],...
    } ...
);



% 右腿
leg_right = struct(...
    'type', {'Y','X','Z','Y','Y','X'}, ...
    'theta', {0, 0, 0, 0, 0, 0}, ...
    'name', {'hip_{pitch}','hip_{roll}','hip_{yaw}','knee','ankle_{pitch}','ankle_{roll}'}, ...
    'urdf', {'right_hip_pitch_link.STL','right_hip_roll_link.STL','right_hip_yaw_link.STL','right_knee_link.STL','right_ankle_pitch_link.STL','right_ankle_roll_link.STL'}, ...
    'T', {...
        [ 1 0 0 0; 0 1 0 -0.064452; 0 0 1 -0.102700; 0 0 0 1],...
        [ 0.984744 0 -0.174010 0; 0 1 0 -0.052000; 0.174010 0 0.984744 -0.030465; 0 0 0 1],...
        [ 1 0 0 0.025001; 0 1 0 0; 0 0 1 -0.124120; 0 0 0 1],...
        [ 0.984744 0 0.174010 -0.078273; 0 1 0 -0.002149; -0.174010 0 0.984744 -0.177340; 0 0 0 1],...
        [ 1 0 0 0; 0 1 0 0.000094; 0 0 1 -0.300010; 0 0 0 1],...
        [ 1 0 0 0; 0 1 0 0; 0 0 1 -0.017558; 0 0 0 1],...
    } ...
);

% 机身 torso
torso = struct(...
    'type', {'Z','Z'}, ...
    'theta', {0,0}, ...
    'name', {'waist_yaw_joint','fixed_head_joint'}, ...
    'urdf', {'torso_link.STL','head_link.STL'}, ...
    'T', {...
        [1 0 0 -0.003964; 0 1 0 0; 0 0 1 0.054; 0 0 0 1], ...
        [1 0 0 0; 0 1 0 0; 0 0 1 -0.054; 0 0 0 1], ...
    } ...
);


% 左臂 left arm 
% 最后一维是fixed
arm_left = struct(...
    'type', {'Y','X','Z','Y','X','X'}, ...
    'theta', {0, 0, 0, 0.3, 0.3, 0}, ...
    'name', {'shoulder_{pitch}','shoulder_{roll}','shoulder_{yaw}','elbow','wrist_{roll}','wrist_{rollHand}'}, ...
    'urdf', {'left_shoulder_pitch_link.STL','left_shoulder_roll_link.STL','left_shoulder_yaw_link.STL','left_elbow_link.STL','left_wrist_roll_link.STL','left_rubber_hand.STL'}, ...
    'T', {...
        [1 0 0 0.003956; -0.000192 0.961246 -0.275692 0.100220; -0.000055 0.275692 0.961246 0.237780; 0 0 0 1], ...
        [1 0 0 0; 0 0.961262 0.275635 0.038; 0 -0.275635 0.961262 -0.013831; 0 0 0 1], ...
        [1 0 0 0; 0 1 0 0.00624; 0 0 1 -0.1032; 0 0 0 1], ...
        [1 0 0 0.015783; 0 1 0 0; 0 0 1 -0.080518; 0 0 0 1], ...
        [1 0 0 0.100000; 0 1 0 0.001888; 0 0 1 -0.010000; 0 0 0 1], ...
        [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1], ... % rubber hand placeholder
    } ...
);

% 右臂 right arm
arm_right = struct(...
    'type', {'Y','X','Z','Y','X','X'}, ...
    'theta', {0, 0, 0, 0, 0, 0}, ...
    'name', {'shoulder_{pitch}','shoulder_{roll}','shoulder_{yaw}','elbow','wrist_{roll}','wrist_{rollHand}'}, ...
    'urdf', {'right_shoulder_pitch_link.STL','right_shoulder_roll_link.STL','right_shoulder_yaw_link.STL','right_elbow_link.STL','right_wrist_roll_link.STL','right_rubber_hand.STL'}, ...
    'T', {...
        [1 0 0 0.003956; 0.000192 0.961246 0.275692 -0.100210; -0.000055 -0.275692 0.961246 0.237780; 0 0 0 1], ...
        [1 0 0 0; 0 0.961262 -0.275635 -0.038; 0 0.275635 0.961262 -0.013831; 0 0 0 1], ...
        [1 0 0 0; 0 1 0 -0.00624; 0 0 1 -0.1032; 0 0 0 1], ...
        [1 0 0 0.015783; 0 1 0 0; 0 0 1 -0.080518; 0 0 0 1], ...
        [1 0 0 0.100000; 0 1 0 -0.001888; 0 0 1 -0.010000; 0 0 0 1], ...
        [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1], ... % rubber hand placeholder
    } ...
);


% 世界坐标系初始化
C_world = showWorldCoordinate(0.1);

% 左腿主链
[lineList_left, T_left_foot]  = drawLegJoint(leg_left, eye(4), C_world, 'L', 'b');

% % 左脚三趾
% for i = 1:length(T_foot)
%     [~, ~] = drawLeg({T_foot{i}}, T_left_foot, C_world, sprintf('L_{f%d}', i), 'b');
% end

% 右腿主链
[lineList_right, T_right_foot]= drawLegJoint(leg_right, eye(4), C_world, 'R', 'r');

% % 右脚三趾
% for i = 1:length(T_foot)
%     [~, ~] = drawLeg({T_foot{i}}, T_right_foot, C_world, sprintf('R_{f%d}', i), 'r');
% end
visualize_transformed_stl('urdf/resource/pelvis_contour_link.STL',eye(4),0.8)
[lineList_torso, T_torso]= drawLegJoint(torso, eye(4), C_world, 'R', 'r');
[lineList_leftArm, T_leftArm]= drawLegJoint(arm_left, T_torso(:,:,end-1), C_world, 'R', 'b');
[lineList_rightArm, T_rightArm]= drawLegJoint(arm_right, T_torso(:,:,end-1), C_world, 'R', 'r');

% 美化显示
% figure('Position', [100, 100, 800, 600]);  % 左下角(x,y), 宽, 高
view(37.5, 30);   % 默认 3D 视角
axis equal;
title('Left and Right Leg Kinematic Chain Visualization');

% 初始结构体 leg_left 已定义
[x, J_foot] = forwardKinematics(leg_left)